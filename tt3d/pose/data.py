"""
Utility scripts to read the data
"""

import numpy as np
import yaml
import json


def filter_by_idx(input, idx):
    player = []
    for el in input:
        if el["idx"] == idx:
            kps = np.array(el["keypoints"]).reshape((-1, 3))[:, :2]
            player.append(kps)
    return np.array(player)


def read_2d_pose(path):
    # Reading 2d pose data from rtmpose (mmpose)
    with open(path, "r") as json_file:
        all_pose_2d = json.load(json_file)
    return all_pose_2d


def read_3d_pose(path):
    """
    Read the 3d pose generated by MotionBert
    The position is read in the camera frame
    """
    pose = np.load(path)
    return pose


def write_3d_pose(path, pose):
    """
    Write the 3d pose for use with MotionBERT by reversing transformations and saving as a .npy file.

    Parameters:
        path (str): Path where the .npy file will be saved.
        pose (np.array): 3D pose data that needs to be transformed.
    """
    # Reverse the transformations applied in read_3d_pose
    # orig_pose = np.zeros_like(pose)
    # orig_pose[:, :, 0] = -pose[:, :, 0]
    # orig_pose[:, :, 2] = -pose[:, :, 1]
    # orig_pose[:, :, 1] = -pose[:, :, 2]

    # Save the transformed pose
    np.save(path, pose)


def read_table_pose(file_path):
    with open(file_path, "r") as file:
        data = yaml.safe_load(file)

    rvec = data.get("rvec", [])
    tvec = data.get("tvec", [])
    f = data.get("f")

    return rvec, tvec, f


def get_motion(json_data):
    all_keypoints = []

    instance_info = json_data.get("instance_info", [])

    for frame in instance_info:
        frame_id = frame.get("frame_id", None)
        instances = frame.get("instances", [])

        if not instances:
            continue

        # Extract keypoints from the first instance in each frame
        first_instance_keypoints = instances[0].get("keypoints", [])

        # Convert to a NumPy array and flatten
        keypoints_array = np.array(first_instance_keypoints)

        # Append to the all_keypoints list
        all_keypoints.append(keypoints_array)

    return np.array(all_keypoints)


def extract_metadata(json_data):
    # Extract meta information
    meta_info = json_data.get("meta_info", {})

    dataset_name = meta_info.get("dataset_name", "")
    num_keypoints = meta_info.get("num_keypoints", 0)

    keypoint_id2name = meta_info.get("keypoint_id2name", {})
    keypoint_name2id = meta_info.get("keypoint_name2id", {})

    upper_body_ids = meta_info.get("upper_body_ids", [])
    lower_body_ids = meta_info.get("lower_body_ids", [])

    flip_indices = meta_info.get("flip_indices", [])
    flip_pairs = meta_info.get("flip_pairs", [])

    # Extract keypoint colors
    keypoint_colors_meta = meta_info.get("keypoint_colors", {})
    keypoint_colors = np.array(keypoint_colors_meta.get("__ndarray__", []))
    keypoint_colors_dtype = keypoint_colors_meta.get("dtype", "uint8")

    # Extract skeleton links
    skeleton_links = meta_info.get("skeleton_links", [])
    num_skeleton_links = meta_info.get("num_skeleton_links", 0)

    # Extract skeleton link colors
    skeleton_link_colors_meta = meta_info.get("skeleton_link_colors", {})
    skeleton_link_colors = np.array(skeleton_link_colors_meta.get("__ndarray__", []))
    skeleton_link_colors_dtype = skeleton_link_colors_meta.get("dtype", "uint8")

    # Extract dataset keypoint weights
    dataset_keypoint_weights_meta = meta_info.get("dataset_keypoint_weights", {})
    dataset_keypoint_weights = np.array(
        dataset_keypoint_weights_meta.get("__ndarray__", [])
    )

    # Extract sigmas
    sigmas_meta = meta_info.get("sigmas", {})
    sigmas = np.array(sigmas_meta.get("__ndarray__", []))

    # Extract stats info
    stats_info = meta_info.get("stats_info", {})

    bbox_center_meta = stats_info.get("bbox_center", {})
    bbox_center = np.array(bbox_center_meta.get("__ndarray__", []))

    bbox_scale_meta = stats_info.get("bbox_scale", {})
    bbox_scale = bbox_scale_meta.get("__ndarray__", 0.0)

    # Consolidate extracted data into a dictionary
    extracted_data = {
        "dataset_name": dataset_name,
        "num_keypoints": num_keypoints,
        "keypoint_id2name": keypoint_id2name,
        "keypoint_name2id": keypoint_name2id,
        "upper_body_ids": upper_body_ids,
        "lower_body_ids": lower_body_ids,
        "flip_indices": flip_indices,
        "flip_pairs": flip_pairs,
        "keypoint_colors": keypoint_colors,
        "keypoint_colors_dtype": keypoint_colors_dtype,
        "skeleton_links": skeleton_links,
        "num_skeleton_links": num_skeleton_links,
        "skeleton_link_colors": skeleton_link_colors,
        "skeleton_link_colors_dtype": skeleton_link_colors_dtype,
        "dataset_keypoint_weights": dataset_keypoint_weights,
        "sigmas": sigmas,
        "bbox_center": bbox_center,
        "bbox_scale": bbox_scale,
    }

    return extracted_data
